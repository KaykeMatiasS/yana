declare module 'use-chat-scroll/index' {
  export * from 'use-chat-scroll/lib/chat-scroll';
  export * from 'use-chat-scroll/lib/sticky-scroll';
  export * from 'use-chat-scroll/lib/data-loader';
  export { IBeforeRenderCb, ILoadMoreCb, IScrollThreshold, IUseReverseInfiniteScrollOptions, IUseReverseInfiniteScrollResponse, EScrollThresholdType, } from 'use-chat-scroll/lib/reverse-infinite-scroll';
  export { IScrollEventHandler, IUseScrollResponse } from 'use-chat-scroll/lib/scroll';

}
declare module 'use-chat-scroll/lib/chat-scroll' {
  import { IUseReverseInfiniteScrollOptions, ILoadMoreCb } from 'use-chat-scroll/lib/reverse-infinite-scroll';
  import { IUseStickyScrollOptions } from 'use-chat-scroll/lib/sticky-scroll';
  /**
   * React hook for making HTML element scroll behaved like chat.
   * If scroll is at the bottom - it would stay there when new content is added.
   * Infinite scroll behavior would kick in when scrolling up.
   * @param targetRef Reference of scrollable HTML element.
   * @param data Array of some data items displayed in a scrollable HTML element. It should normally come from a state.
   * @param loadMoreCb Callback for loading more data.
   * It is very important to ensure that this callback does not issue a request if end of data is reached. Otherwise target server might be spammed with requests.
   * @param options Additional options to customize hook behavior.
   */
  export const useChatScroll: (targetRef: React.MutableRefObject<Element>, data: any[], loadMoreCb: ILoadMoreCb, options?: IUseChatScrollOptions) => IUseChatScrollReturn;
  /**
   * Options for customizing behavior of useChatScroll hook.
   */
  export interface IUseChatScrollOptions {
      /**
       * Options for reverse infinite scroll behavior.
       */
      reverseInfiniteScroll: IUseReverseInfiniteScrollOptions;
      /**
       * Options for sticky scroll behavior.
       */
      stickyScroll: IUseStickyScrollOptions;
  }
  /**
   * Flags and methods provided by useChatScroll hook.
   */
  export interface IUseChatScrollReturn {
      /**
       * True when scroll is stuck to the bottom of target element.
       */
      sticky: boolean;
      /**
       * Indicates whether reverse infinite scroll behavior is enabled.
       */
      reverseInfiniteScrollEnabled: boolean;
      /**
       * True when sticky scroll behavior is enabled.
       */
      stickyScrollEnabled: boolean;
      /**
       * Enables reverse infinite scroll behavior.
       */
      enableReverseInfiniteScroll: () => void;
      /**
       * Disables reverse infinite scroll behavior.
       */
      disableReverseInfiniteScroll: () => void;
      /**
       * Enables sticky scroll behavior.
       */
      enableStickyScroll: () => void;
      /**
       * Disables sticky scroll behavior.
       */
      disableStickyScroll: () => void;
      /**
       * Scrolls to bottom of the target element.
       */
      scrollToBottom: () => void;
      /**
       * Overrides callback for loading more data with a new one.
       */
      updateLoadMoreCb: (newLoadMoreCb: ILoadMoreCb) => void;
  }

}
declare module 'use-chat-scroll/lib/data-loader' {
  import { ILoadMoreCb } from 'use-chat-scroll/index';
  /**
   * React hook which creates a usable data loader for useInfiniteScroll hook.
   * It is only useful if new data is always added to the beginning of the array.
   * Should one need a different behavior or better optimization techniques - custom implementation would be needed.
   * @param dataLoader Data loader function to be converted into compatible callback for useDataLoader.
   * @param data Data to be shown in a scrollable HTML element.
   * @param setData Method for setting data into state.
   * @param args Array of arguments to be passed to data loader
   */
  export const useDataLoader: (dataLoader: IDataLoaderCb, data: any[], setData: ISetDataCb, args?: any[]) => ILoadMoreCb;
  /**
   * Callback for loading additional data for scrollable HTML element.
   * Arguments for this function are passed as second argument of useDataLoader hook.
   */
  export type IDataLoaderCb = (...args: any[]) => any;
  /**
   * Method used for setting new data into state.
   */
  export type ISetDataCb = (data: any[]) => void;

}
declare module 'use-chat-scroll/lib/reverse-infinite-scroll' {
  /**
   * React hook for enabling reverse infinite scroll on HTML container when scroll reaches top.
   * @private
   * @param targetRef Reference of scrollable HTML element.
   * @param loadMoreCb Callback for loading more data.
   * It is very important to ensure that this callback does not issue a request if end of data is reached. Otherwise target server might be spammed with requests.
   * @param options Additional options to customize hook behavior.
   */
  export const useReverseInfiniteScroll: (targetRef: React.MutableRefObject<Element>, loadMoreCb: ILoadMoreCb, options?: IUseReverseInfiniteScrollOptions) => IUseReverseInfiniteScrollResponse;
  /**
   * Callback which would be called every time scroll is detected close to the top of container.
   * @param beforeRender - callback which should be called AFTER additional data is gathered but BEFORE any state is updated which is used for re-render.
   * @returns Promise which is resolved AFTER DOM is updated with additional data.
   */
  export type ILoadMoreCb = (beforeRender: IBeforeRenderCb) => Promise<any>;
  /**
   * Callback which should be called AFTER additional data is gathered but BEFORE any state is updated which is used for re-render.
   */
  export type IBeforeRenderCb = () => void;
  /**
   * Accepted options for customizing useReverseInfiniteScroll hook.
   */
  export interface IUseReverseInfiniteScrollOptions {
      /**
       * Defines how close to the top user needs to scroll in order to invoke gathering of additional data.
       */
      scrollThreshold?: IScrollThreshold;
      /**
       * Defines whether infinite scroll behavior is enabled initially.
       */
      enabled?: boolean;
  }
  /**
   * Defines how close to the top user needs to scroll in order to invoke gathering of additional data.
   */
  export interface IScrollThreshold {
      /**
       * Defines how threshold is calculated.
       */
      type?: EScrollThresholdType;
      /**
       * Threshold value.
       */
      value?: number;
  }
  /**
   * Defines how threshold is calculated.
   */
  export enum EScrollThresholdType {
      /**
       * Fraction of content height left to the top (for example 0.2).
       */
      fraction = 0,
      /**
       * Distance to top in pixels.
       */
      pixels = 1
  }
  /**
   * Flags and methods provided by useReverseInfiniteScroll hook.
   */
  export interface IUseReverseInfiniteScrollResponse {
      /**
       * Indicates whether reverse infinite scroll behavior is enabled.
       */
      enabled: boolean;
      /**
       * Enables reverse infinite scroll behavior.
       */
      enable: () => void;
      /**
       * Disables reverse infinite scroll behavior.
       */
      disable: () => void;
      /**
       * Overrides callback for loading more data with a new one.
       */
      updateLoadMoreCb: (newLoadMoreCb: ILoadMoreCb) => void;
  }

}
declare module 'use-chat-scroll/lib/scroll' {
  /**
   * React hook for controlling scrollable HTML element.
   * @private
   * @param targetRef Reference of scrollable HTML element.
   */
  export const useScroll: (targetRef: React.MutableRefObject<Element>) => IUseScrollResponse;
  /**
   * Scroll event handler.
   */
  export type IScrollEventHandler = (event: Event) => void;
  /**
   * Flags and methods provided by useScroll hook.
   */
  export interface IUseScrollResponse {
      /**
       * Verifies whether target element is currently fetching data.
       */
      isFetching: () => boolean;
      /**
       * Marks target element as currently fetching data.
       */
      setFetching: () => void;
      /**
       * Marks target element as currently not fetching data.
       */
      setFetched: () => void;
      /**
       * Gathers current scroll height for target element.
       */
      getCurrentScrollHeight: () => number;
      /**
       * Gathers current scroll position of target element.
       */
      getScrollTop: () => number;
      /**
       * Scrolls target element.
       * @param offset Scroll position from the top.
       */
      setScrollTop: (offset: number) => void;
      /**
       * Gathers last stored value of target element scroll height.
       */
      getStoredScrollHeight: () => number;
      /**
       * Stores current scroll height of target element for later use.
       */
      storeCurrentScrollHeight: () => void;
      /**
       * Gathers last stored value of target element scroll top offset.
       */
      getStoredScrollTop: () => number;
      /**
       * Stores current scroll offset of target element for later use.
       */
      storeCurrentScrollTop: () => void;
      /**
       * Overrides scroll event handler to a new one.
       */
      setScrollEventHandler: (newScrollHandler: IScrollEventHandler) => void;
  }

}
declare module 'use-chat-scroll/lib/sticky-scroll' {
  /**
   * React hook for keeping HTML element scroll at the bottom when content updates (if it is already at the bottom).
   * @param targetRef Reference of scrollable HTML element.
   * @param data Array of some data items displayed in a scrollable HTML element. It should normally come from a state.
   */
  export const useStickyScroll: (targetRef: React.MutableRefObject<Element>, data: any[], options?: IUseStickyScrollOptions) => IUseStickyScrollResponse;
  /**
   * Accepted options for customizing useStickyScroll hook.
   */
  export interface IUseStickyScrollOptions {
      /**
       * Defines whether sticky scroll behavior is enabled initially.
       */
      enabled?: boolean;
  }
  /**
   * Flags and methods provided by useStickyScroll hook.
   */
  export interface IUseStickyScrollResponse {
      /**
       * True when sticky scroll behavior is enabled.
       */
      enabled: boolean;
      /**
       * True when scroll is stuck to the bottom of target element.
       */
      sticky: boolean;
      /**
       * Scrolls to bottom of the target element.
       */
      scrollToBottom: () => void;
      /**
       * Enables sticky scroll behavior.
       */
      enable: () => void;
      /**
       * Disables sticky scroll behavior.
       */
      disable: () => void;
  }

}
declare module 'use-chat-scroll' {
  import main = require('use-chat-scroll/index');
  export = main;
}